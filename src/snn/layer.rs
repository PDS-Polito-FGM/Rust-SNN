// * private Layer submodule *

use std::sync::mpsc::{Receiver, Sender};
use crate::snn::neuron::Neuron;

/* Object representing the output spikes generated by a single layer */
pub struct SpikeEvent {
    ts: u64,
    spikes: Vec<u8>
}

impl SpikeEvent {
    pub fn new(ts: u64, spikes: Vec<u8>) -> Self {
        Self { ts, spikes }
    }
}

/* Object representing a Layer of the Spiking Neural Network */
pub struct Layer<N: Neuron> {
    neurons: Vec<N>,
    weights: Vec<Vec<f64>>,
    intra_weights: Vec<Vec<f64>>,
    rc: Receiver<SpikeEvent>,
    tx: Sender<SpikeEvent>,
}

impl<N: Neuron> Layer<N> {
    pub fn new(neurons: Vec<N>, weights: Vec<Vec<f64>>, intra_weights: Vec<Vec<f64>>, rc: Receiver<SpikeEvent>, tx: Sender<SpikeEvent>) -> Self {
        Self { neurons, weights, intra_weights, rc, tx }
    }
}