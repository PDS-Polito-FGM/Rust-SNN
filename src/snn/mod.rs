use crate::snn::layer::{Layer};
use crate::snn::neuron::Neuron;
use std::sync::mpsc::channel;

// * submodules *
pub mod builder;
mod layer; // private
pub mod neuron;

// * SNN module *

/**
   Object representing the Spiking Neural Network itself
*/
pub struct SNN<N: Neuron> {
    // test
    pub s: bool,
    pub l: Layer<N>,
}

// TODO: implement SNN struct
impl<N: Neuron> SNN<N> {
    // test
    pub fn new(s: bool) -> Self {
        let (tx, rc) = channel::<SpikeEvent>();
        let la: Layer<N> = Layer::new(vec![], vec![], vec![], rc, tx);
        Self { s, l: la }
    }
}

/* Object representing the output spikes generated by a single layer */
pub struct SpikeEvent {
    ts: u64,
    spikes: Vec<u8>,
}

impl SpikeEvent {
    pub fn new(ts: u64, spikes: Vec<u8>) -> Self {
        Self { ts, spikes }
    }
}
